// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  rank      String   @default("Newcomer")
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wasteEntries WasteEntry[]
  hotspots     Hotspot[]
  eventRegistrations EventRegistration[]
  userAchievements UserAchievement[]

  @@map("users")
}

model WasteEntry {
  id        String   @id @default(cuid())
  type      String
  weight    Float
  location  String
  latitude  Float?
  longitude Float?
  verified  Boolean  @default(false)
  imageUrl  String?
  date      DateTime @default(now())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("waste_entries")
}

model Hotspot {
  id          String   @id @default(cuid())
  title       String
  description String?
  latitude    Float
  longitude   Float
  priority    Priority @default(MEDIUM)
  status      HotspotStatus @default(REPORTED)
  reportedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [reportedBy], references: [id])

  @@map("hotspots")
}

model Event {
  id           String   @id @default(cuid())
  title        String
  description  String?
  location     String
  latitude     Float?
  longitude    Float?
  date         DateTime
  maxParticipants Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  registrations EventRegistration[]

  @@map("events")
}

model EventRegistration {
  id      String @id @default(cuid())
  userId  String
  eventId String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_registrations")
}

model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  requirement String // JSON string describing requirements
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum HotspotStatus {
  REPORTED
  VERIFIED
  IN_PROGRESS
  RESOLVED
}